/* eslint-disable better-tree-shaking/no-top-level-side-effects */

import { writeFile } from "fs/promises";
import { rm, mkdir, readFile } from "fs/promises";
import { join } from "path";
import { format } from "prettier";

const allWalletsJson = JSON.parse(
  await readFile(join(__dirname, "./all-wallets.json"), "utf-8"),
);

type Wallet = {
  id: string;
  name: string;
  homepage: string;
  image_id: string;
  order: number;
  app: {
    browser: string | null;
    ios: string | null;
    android: string | null;
    mac: string | null;
    windows: string | null;
    linux: string | null;
    chrome: string | null;
    firefox: string | null;
    safari: string | null;
    edge: string | null;
    opera: string | null;
  };
  injected: Array<{
    injected_id: string;
    namespace: string;
  }> | null;
  rdns: string | null;
  mobile: {
    native: string | null;
    universal: string | null;
  };
  desktop: {
    native: string | null;
    universal: string | null;
  };
};

const allWalletsArray = Object.values(allWalletsJson.listings) as Wallet[];

function rdns(wallet: Wallet) {
  return new URL(wallet.homepage).hostname
    .split(".")
    .filter((s) => s !== "www")
    .reverse()
    .join(".");
}

const allWalletsWithIds = allWalletsArray.map((wallet) => {
  delete (wallet as any).order;
  delete (wallet as any).injected;
  return { ...wallet, id: rdns(wallet) };
});

// filter duplicate ids, we'll keep the first ones
const uniqueWallets = allWalletsWithIds.filter(
  (wallet, index, self) => index === self.findIndex((t) => t.id === wallet.id),
);

// generate walletInfos

const walletInfos = uniqueWallets.map((wallet) => {
  return { id: wallet.id, name: wallet.name };
});

// clean the __geneated__ folder within `src/wallets/` directory
const OUT_PATH = join(__dirname, "../../src/wallets/__generated__");

await rm(OUT_PATH, { recursive: true });
await mkdir(OUT_PATH, { recursive: true });

// write wallet infos to a typescript file
await writeFile(
  join(OUT_PATH, "wallet-infos.ts"),
  await format(
    `// This file is auto-generated by the \`scripts/wallets/generate.ts\` script.
// Do not modify this file manually.

export type WalletInfo = {
  id: string;
  name: string;
};

export const walletInfos = ${JSON.stringify(walletInfos, null, 2)} satisfies WalletInfo[];
`,
    {
      parser: "babel-ts",
    },
  ),
);

// for each wallet, generate a folder within the `src/wallets/__generated__` directory
// and write a `index.ts` file with the wallet's information
for (const wallet of uniqueWallets) {
  const walletDir = join(OUT_PATH, wallet.id);
  await mkdir(walletDir, { recursive: true });
  await writeFile(
    join(walletDir, "index.ts"),
    await format(
      `// This file is auto-generated by the \`scripts/wallets/generate.ts\` script.
// Do not modify this file manually.

export const wallet = ${JSON.stringify(wallet, null, 2)} as const;
`,
      {
        parser: "babel-ts",
      },
    ),
  );

  // download the wallet's image
  const image = await fetch(
    `https://explorer-api.walletconnect.com/w3m/v1/getWalletImage/${wallet.image_id}?projectId=145769e410f16970a79ff77b2d89a1e0&`,
  );
  const arrBuff = await image.arrayBuffer();
  // arrayBuffer to base64 png

  const base64Flag = "data:image/png;base64,";
  // eslint-disable-next-line no-restricted-globals
  const imageStr = Buffer.from(arrBuff).toString("base64");
  // write the image to the wallet's folder in a typescript file
  await writeFile(
    join(walletDir, "image.ts"),
    await format(
      `// This file is auto-generated by the \`scripts/wallets/generate.ts\` script.
// Do not modify this file manually.

const image = "${base64Flag}${imageStr}";

export default image;
`,
      {
        parser: "babel-ts",
      },
    ),
  );
}
